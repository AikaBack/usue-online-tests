@using System.Text.RegularExpressions
@using System.Drawing.Imaging
@using System.IO
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@model TestWrapper


@if (Model.Test != null)
{
    @*TIMER*@
    @if (Model.TimeLimited)
    {
        <p class="timer-wrapper">
            Оставшееся время: <span id="time">@Model.SecLimit</span> сек.
        </p>
    }

    <style>
        #time {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .timer-wrapper {
            border-bottom: solid 1px black;
            font-size: 1.1rem;
            margin-bottom: 25px;
        }
    </style>

    @if (Model.Test.Pictures != null)
    {
        @foreach (var pic in Model.Test.Pictures)
        {
            MemoryStream stream = new MemoryStream();
            pic.Save(stream, ImageFormat.Png);
            byte[] data = new byte[stream.Length];
            stream.Position = 0;
            stream.Read(data, 0, data.Length);
            <img class="test-start-img" src="data:image/jpeg;base64,@Convert.ToBase64String(data)" />
            pic.Dispose();
        }
    }

    <form id="answers-form" method="POST" action="@Model.Link">
        <input hidden name="testId" value="@Model.TestId" />
        <input hidden name="hash" value="@Model.Hash" />
        @{
            var matches = Regex.Matches(Model.Test.Text, "<(.*?)>");
            for (int i = 0; i < matches.Count; i++)
            {
                if (matches[i].Groups[1].Value.StartsWith("CB_"))
                {
                    Model.Test.Text = Model.Test.Text.Replace(matches[i].Groups[0].Value,
                        $"<input type=\"checkbox\" name=\"{matches[i].Groups[1].Value.Remove(0, 3)}\" /> " +
                        $"<label>{matches[i].Groups[1].Value.Remove(0, 3)}</label>");
                }
                else
                {
                    Model.Test.Text = Model.Test.Text.Replace(matches[i].Groups[0].Value,
                        $"\\FormInput[2][test-start-input][]{{{matches[i].Groups[1].Value}}}");
                }
            }
        }
        <p class="test-start-text">@Html.Raw(Model.Test.Text.Replace("\n", "<br/>"))</p>

        @if (Model.Test.CheckBoxes != null)
        {
            <input hidden name="testsCount" value="@(Model.Test.CheckBoxes.Length + matches.Count)" />
            @foreach (var t in Model.Test.CheckBoxes)
            {
                <div>
                    <input type="checkbox" name="@t" />
                    <label>@t</label>
                </div>
            }
        }
        else
        {
            <input hidden name="testsCount" value="@matches.Count" />
        }

        <input type="submit" class="test-start-complete-button" value="@Model.BtnText" />
    </form>
    <style>
        .test-start-complete-button {
            background-color: #5a6269;
            color: white;
            -ms-border-radius: 10px;
            border-radius: 10px;
            padding: 7px;
            margin-top: 20px;
        }
    </style>
}
else
{
    <h2>Произошла ошибка при генерации задания</h2>
}
