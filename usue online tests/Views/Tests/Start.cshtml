@using System.Text.RegularExpressions;
@using System.IO
@using System.Drawing.Imaging
@model ITestWrapper

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            extensions: ["tex2jax.js", "/libs/forminput.js"],
            jax: ["input/TeX", "output/HTML-CSS"],
            tex2jax: {
                inlineMath: [
                ["$", "$"],
                ["\\(", "\\)"]
                ],
                TeX: { extensions: ["AMSmath.js", "AMSsymbols.js"] },
            },
            showMathMenu: false,
            messageStyle: "none"
        });
    </script>
}

@{
    ViewData["Title"] = "Тест";
}

<div class="prose">
    @if (Model.Test != null)
    {
        @if (Model.Test.Pictures != null)
        {
            @foreach (var pic in Model.Test.Pictures)
            {
                MemoryStream stream = new MemoryStream();
                pic.Save(stream, ImageFormat.Png);
                byte[] data = new byte[stream.Length];
                stream.Position = 0;
                stream.Read(data, 0, data.Length);
                <img class="" src="data:image/jpeg;base64,@Convert.ToBase64String(data)" />
                pic.Dispose();
            }
        }

        @using (Html.BeginForm("CheckAnswers", "Tests", FormMethod.Post))
        {
            <input hidden name="testId" value="@Model.TestId" />
            <input hidden name="hash" value="@Model.Hash" />

            var matches = Regex.Matches(Model.Test.Text, "<(.*?)>");
            for (int i = 0; i < matches.Count; i++)
            {
                if (matches[i].Groups[1].Value.StartsWith("CB_"))
                {
                    Model.Test.Text = Model.Test.Text.Replace(matches[i].Groups[0].Value,
                        $"<div class=\"label\">" +
                        $"    <input class=\"checkbox\" type=\"checkbox\" name=\"{matches[i].Groups[1].Value.Remove(0, 3)}\"/> " +
                        $"    <label class=\"label-text ml-2 mr-auto\">{matches[i].Groups[1].Value.Remove(0, 3)}</label>") +
                        $"</div>";
                }
                else
                {
                    Model.Test.Text = Model.Test.Text.Replace(matches[i].Groups[0].Value,
                    $"\\FormInput[2][input input-sm mx-2 my-1][]{{{matches[i].Groups[1].Value}}}");
                }
            }

            <p>@Html.Raw(Model.Test.Text.Replace("\n", "<br/>"))</p>

            if (Model.Test.CheckBoxes != null)
            {
                <input hidden name="testsCount" value="@(Model.Test.CheckBoxes.Length + matches.Count)" />
                foreach (var t in Model.Test.CheckBoxes)
                {
                    <div class="label">
                        <input class="checkbox" type="checkbox" name="@t" />
                        <label class="label-text ml-2 mr-auto">@t</label>
                    </div>
                }
            }
            else
            {
                <input hidden name="testsCount" value="@matches.Count" />
            }

            <input type="submit" class="btn my-8" value="Завершить" />
        }
    }
    else
    {
        <h2>Произошла ошибка при генерации задания</h2>
    }
</div>